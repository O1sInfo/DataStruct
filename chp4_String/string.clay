串(String)(或字符串)是由零个或多个字符组成的有限序列。
一般记为：s = 'a1a2...an'

串的表示和实现

1. 定长顺序存储表示
类似与线性表的顺序存储结构，用一组地址连续的存储单元存储串的字符序列。
在串的定长顺序存储结构中，按照预定义的大小，为每个定义的串变量分配一个固定长度的存储区。

# define MAXSTRLEN 255
typedef unsigned char SString[MAXSTRLEN+1];	// 0号单元存放串的长度


2. 堆分配存储表示
任用一组地址连续的存储单元存储串的字符序列， 但它们的空间是在程序执行过程中动态分配得到的。
在c语言中存在一个称为‘堆’的自由存储区，并由动态分配函数malloc()和free()来管理。

typedef struct{
	char *ch;
	int length;
}HString;


3. 块链存储表示
和线性表的链式存储结构类似，也可采用链表的额方式存储字符串

存储密度 = 串值所占的存储位/实际分配的存储位


模式匹配算法KMP
	改进在与：每一趟匹配过程中出现字符比较不等时，不需要回溯指针,而是利用已经得到的"部分匹配"的结果将模式向右"滑动"尽可能多的距离，继续进行比较
	
	假设主串为"S1S2...Sn", 模式串为"P1P1...Pm"
	关键问题是：当主串中第i个字符与模式中的第j个字符不匹配时，主串中的第i个字符(i指针不回溯)应与模式中哪个字符再比较？
	假设此时应与第k(<j)个字符继续比较, 则模式中前k-1个字符的字串必须满足
		'P1 P2... Pk-1' = 'Si-k+1 Si-k+2 ...Si-1 '
	而已经得到的部分匹配结果是
		'Pj-k+1 Pj-k+2 ... Pj-1' = 'Si-k+1 Si-k+2 ... Si-1'
	于是得到
		'P1 P2... Pk-1' = 'Si-k+1 Si-k+2 ... Si-1'
	